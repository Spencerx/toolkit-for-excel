/*Copyright 2009 Mark Logic Corporation

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
 * 
 * Program.cs - A simple app to start/quit PowerPoint 
 *              used for testing .xqy and .js APIs
*/
using System.ComponentModel;
using System.Data;
using System.Windows.Forms;
using System.Runtime.InteropServices;
using System.Security.Permissions;
using System.IO;
using System;
using Office = Microsoft.Office.Core;
using Microsoft.Win32;
using PPT = Microsoft.Office.Interop.PowerPoint;
using System.Collections.Generic;
using System.Linq;
using System.Text;


namespace MarkLogic_PowerPointAddin_Test
{
    class Program
    {
      
        //loop thru dir, open and close each pptx.  
        //write out results. all should open/close without issue.
        //assumption they're generated by .xqy (add xcc, call here as first step? probably.)
        static void Main(string[] args)
        {
            if (args.Length != 1)
            {
                Console.WriteLine("Expected Params: 1|2|3 indicates which type of test to perform. \n\n"+
                                  "1: test opening saved .pptx only \n" +
                                  "2: test addin js onLoad only \n" +
                                  "3: test both 1 and 2 \n\n" +
                                  "Press any key too continue...");
                Console.ReadLine();
                return;
            }

            int type =  Int32.Parse(args[0]);

            string MLAddin = "MarkLogic_PowerPointAddin";
            string outputDirectory = @"C:\unitTestAddin\outputs";
            string outputFileName = "TestResults.txt";
            string outputFile = outputDirectory + "\\" + outputFileName;
            string sourceDirectory = @"C:\unitTestAddin\pptx";

            string message = "";
            string tmpdoc = "";
            object missing = Type.Missing;

            if (type == 1 || type == 3)
            {
                try
                {
                   //start PowerPoint app
                    PPT.Application pptApp;
                    PPT.Presentation ppt;
                    pptApp = new PPT.Application();
                    pptApp.Visible = Microsoft.Office.Core.MsoTriState.msoTrue;

                    //disable Addin, this will help speed testing
                    //can re-enable and then run .js tests onLoad
                    foreach (Office.COMAddIn addin in pptApp.COMAddIns)
                    {
                        Console.WriteLine(addin.Description);
                        if (addin.Description.ToUpper().Contains(MLAddin.ToUpper()))
                        {
                            addin.Connect = false;
                        }

                    }

                    //get all file names in sourceDirectory
                    //will loop through and open
                    //failure to open reflects problem with generated .pptx
                    DirectoryInfo root = new DirectoryInfo(sourceDirectory);
                    FileInfo[] rootFiles = root.GetFiles();
                    DirectoryInfo[] dirs = root.GetDirectories("*", SearchOption.AllDirectories);

                    foreach (FileInfo file in rootFiles)
                    {
                        try
                        {
                            tmpdoc = sourceDirectory + "\\" + file.Name;
                            ppt = pptApp.Presentations.Open(tmpdoc, Office.MsoTriState.msoFalse, Office.MsoTriState.msoTrue, Office.MsoTriState.msoTrue);
                            ppt.Close();
                            message += Environment.NewLine +
                                       "SUCCESS: " + file.Name +
                                       Environment.NewLine +
                                       "***************************************************";
                        }
                        catch (Exception e)
                        {
                            message += Environment.NewLine +
                                       "FAIL: " + tmpdoc + "\n" + e.Message + "\n" + e.StackTrace +
                                       Environment.NewLine +
                                       "**************************************************";
                        }
                    }

                    //quit PowerPoint
                    pptApp.Quit();

                    //write results (message) to outputFile
                    System.IO.File.WriteAllText(outputFile, message);

                    Console.WriteLine(message);
                    //can add debug option here
                    Console.WriteLine("Press any key too continue...");
                    Console.ReadLine();

                }
                catch (Exception e)
                {
                    string errorMsg = e.Message;
                    message += "ERROR: " + errorMsg +"\n\n"+e.StackTrace;
                }
            }

        }
    }
}
